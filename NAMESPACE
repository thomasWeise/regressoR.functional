# Generated by roxygen2: do not edit by hand

export(FittedFunctionalModel.as.character)
export(FittedFunctionalModel.finalize)
export(FittedFunctionalModel.new)
export(FunctionalModel.fit)
export(FunctionalModel.fit.cmaes)
export(FunctionalModel.fit.de)
export(FunctionalModel.fit.dfoptim)
export(FunctionalModel.fit.lbfgsb)
export(FunctionalModel.fit.minqa)
export(FunctionalModel.fit.nls)
export(FunctionalModel.fit.nlslm)
export(FunctionalModel.fit.optim)
export(FunctionalModel.fit.pso)
export(FunctionalModel.fit.transformed)
export(FunctionalModel.makeLearners)
export(TransformedFittedFunctionalModel.as.character)
export(TransformedFittedFunctionalModel.new)
exportClasses(FittedFunctionalModel)
exportClasses(TransformedFittedFunctionalModel)
importClassesFrom(regressoR.base,FittedModel)
importClassesFrom(regressoR.functional.models,FunctionalModel)
importClassesFrom(regressoR.quality,RegressionQualityMetric)
importFrom(DEoptim,DEoptim)
importFrom(DEoptim,DEoptim.control)
importFrom(cmaes,cma_es)
importFrom(compiler,cmpfun)
importFrom(dfoptim,hjk)
importFrom(dfoptim,hjkb)
importFrom(dfoptim,nmk)
importFrom(dfoptim,nmkb)
importFrom(functionComposeR,function.compose)
importFrom(functionComposeR,function.substitute)
importFrom(learnerSelectoR,learning.checkQuality)
importFrom(methods,is)
importFrom(methods,new)
importFrom(methods,representation)
importFrom(methods,setClass)
importFrom(methods,setMethod)
importFrom(methods,validObject)
importFrom(minpack.lm,nls.lm)
importFrom(minqa,bobyqa)
importFrom(minqa,newuoa)
importFrom(pso,psoptim)
importFrom(regressoR.functional.models,FunctionalModel.monotonous)
importFrom(regressoR.functional.models,FunctionalModel.new)
importFrom(regressoR.functional.models,FunctionalModel.par.check)
importFrom(regressoR.functional.models,FunctionalModel.par.estimate)
importFrom(regressoR.functional.models,FunctionalModel.par.fix)
importFrom(stats,nls)
importFrom(stats,optim)
importFrom(stats,rnorm)
importFrom(stats,runif)
importFrom(utilizeR,ignoreErrors)
importMethodsFrom(learnerSelectoR,learning.Result.finalize)
